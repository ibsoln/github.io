swagger: '2.0'
info:
  title: Sync Gateway
  description: |
    Documentation for the Sync Gateway Admin REST API.
    This page is generated from the Sync Gateway Admin Swagger spec, the exact same information is also available at [developer.couchbase.com/mobile/swagger/sync-gateway-admin](http://developer.couchbase.com/mobile/swagger/sync-gateway-admin/).
  version: '1.0'
# the domain of the service
host: localhost:4985
# array of all schemes that your API supports
schemes:
- http
- https
# will be prefixed to all paths
consumes:
- application/json
produces:
- application/json
paths:
  /{db}/_role:
    get:
      tags:
      - role
      summary: Get roles
      description: This request returns all the roles in the specified database.
      parameters:
      - $ref: '#/parameters/db'
      responses:
        200:
          description: 200 OK – Returns the list of roles as an array of strings
          schema:
            type: array
            description: The message body contains the list of roles in a JSON array. Each element of the array is a string representing the name of a role in the specified database.
            items:
              type: string
    post:
      tags:
      - role
      summary: Role
      description: This request creates a new role in the specified database.
      parameters:
      - $ref: '#/parameters/role'
      responses:
        201:
          description: 201 OK – The role was created successfully
        409:
          description: 409 Conflict – A role with this name already exists
  /{db}/_role/{name}:
    get:
      tags:
      - role
      summary: Get role
      description: Request a specific role by name.
      parameters:
      - $ref: '#/parameters/db'
      - $ref: '#/parameters/role_name'
      responses:
        200:
          description: The response contains information about this role.
          schema:
            $ref: '#/definitions/Role'

    put:
      tags:
      - role
      summary: Creates or updates a role
      description: This request creates or updates a role in the specified database.
      parameters:
      - $ref: '#/parameters/role'
      responses:
        200:
          description: 200 OK – The role was updated successfully
        201:
          description: 201 Created – The role was created successfully
    delete:
      tags:
      - role
      summary: Deletes the role
      description: This request deletes the role with the specified name in the specified database.
      responses:
        200:
          description: 200 OK – The role was successfully deleted
  /{db}/_user/:
    get:
      tags:
      - user
      summary: Retrieves all users
      description: This request returns all the users in the specified database.
      parameters:
      - $ref: '#/parameters/db'
      responses:
        200:
          description: The message body contains the list of users in a JSON array. Each element of the array is a string representing the name of a user in the specified database.
          schema:
            type: array
            items:
              type: string
              description: username
    post:
      tags:
      - user
      summary: Creates a new user
      description: This request creates a new user in the specified database.
      parameters:
      - $ref: '#/parameters/user'
      responses:
        201:
          description: 201 OK – The user was created successfully
        409:
          description: 409 Conflict – A user with this name already exists
  /{db}/_user/{name}:
    get:
      tags:
      - user
      summary: Retrieves a specific user
      description: This request returns information about the specified user.
      parameters:
      - $ref: '#/parameters/db'
      - $ref: '#/parameters/name'
      responses:
        200:
          description: 200 OK – Returns information about the specified user
          schema:
            $ref: '#/definitions/User'
    put:
      tags:
      - user
      summary: Creates or updates a user
      description: This request creates or updates a user in the specified database.
      parameters:
      - $ref: '#/parameters/user'
      responses:
        200:
          description: 200 OK – The user record was updated successfully
        201:
          description: 201 Created – The user record was created successfully
    delete:
      tags:
      - user
      summary: Deletes a user
      description: This request deletes the user with the specified name in the specified database.
      responses:
        200:
          description: 200 OK – The user was successfully deleted
definitions:
  # DocumentResponse:
  #   type: object
  #   properties:
  #     _id:
  #       type: string
  #       description: Document identifier
  #     _rev:
  #       type: string
  #       description: Revision identifier
  # Error:
  #   type: object
  #   properties:
  #     code:
  #       type: integer
  #       format: int32
  #     message:
  #       type: string
  #     fields:
  #       type: string
  # Success:
  #   type: object
  #   properties:
  #     id:
  #       type: string
  #       description: Design document identifier
  #     rev:
  #       type: string
  #       description: Revision identifier
  #     ok:
  #       type: boolean
  #       description: Indicates whether the operation was successful
  Role:
    type: object
    properties:
      name:
        type: string
      admin_channels:
        type: array
        description: |
          The admin channels that this role has granted access to. Admin channels are the ones which were
          granted access to in the config file or via the Admin REST API.
        items:
          type: string
      all_channels:
        type: array
        description: All the channels that this role has access to.
        items:
          type: string
  User:
    type: object
    properties:
      name:
        type: string
        description: The user name (the same name used in the URL path). The valid characters for a user name are alphanumeric ASCII characters and the underscore character. The name property is required in a POST request. You don’t need to include it in a PUT request because the user name is specified in the URL.
      password:
        type: string
        description: Password of the user that will be created. Required, unless the `allow_empty_password` Sync Gateway per-database configuration value is set to `true`, in which case the password can be omitted.
      admin_channels:
        type: array
        description: The channels that the user is explicitly granted access to through the Admin REST API.
        items:
          type: string
          description: Channel name
      admin_roles:
        type: array
        description: The roles that the user is explicitly granted access to through the Admin REST API.
        items:
          type: string
          description: Role name
      all_channels:
        type: array
        description: Like the `admin_channels` property, but also includes channels the user is given access to by other documents via a sync function. This is a derived property and changes to it are ignored.
        items:
          type: string
          description: Channel name
      email:
        type: string
        description: Email of the user that will be created.
      disabled:
        type: boolean
        description: This property is usually not included. If the value is set to `true`, access for the account is disabled and the user will not be able to login.
      roles:
        type: array
        description: Like the `admin_roles` property, but also includes roles the user is given access to by other documents via a sync function. This is a derived property and changes to it are ignored. It contains an array of role name strings.
        items:
          type: string
          description: Role name
  # UserContext:
  #   type: object
  #   description: Context for this user.
  #   properties:
  #     channels:
  #       type: object
  #       description: Key-value pairs with a channel name as the key and the sequence number that granted the user access to the channel as value. `!` is the public channel and every user has access to it.
  #     name:
  #       type: string
  #       description: The user's name.


parameters:
  access:
    name: access
    in: query
    description: Indicates whether to include in the response a list of what access this document grants (i.e. which users it allows to access which channels.) This option may only be used from the admin port.
    type: boolean
    default: false
  body:
    name: body
    in: body
    description: The request body
    schema:
      type: string
      format: binary
  channels:
    in: query
    name: channels
    description: Indicates whether to include in the response a channels property containing an array of channels this document is assigned to. (Channels not accessible by the user making the request will not be listed.)
    type: boolean
    default: false
  channels_list:
    in: query
    name: channels
    description: A comma-separated list of channel names. The response will be filtered to only documents in these channels. (This parameter must be used with the **sync_gateway/bychannel** filter parameter; see below.)
    type: string
    required: false
  content_type:
    in: header
    name: Content-Type
    description: Attachment Content-Type
    type: string
  db:
    name: db
    in: path
    description: Database name
    type: string
    required: true
  descending:
    name: descending
    in: query
    description: Default is false. Return documents in descending order.
    type: boolean
    required: false
  doc:
    name: doc
    in: path
    description: Document ID
    type: string
    required: true
  role:
    in: body
    name: role
    description: The message body is a JSON document that contains the following objects.
    schema:
      type: object
      properties:
        name:
          type: string
          description: Name of the role that will be created
        admin_channels:
          type: array
          description: Array of channel names to give the role access to
          items:
            type: string
  role_name:
    in: path
    name: name
    description: |
      Role name, may contain any combination of the characters `[a-z A-Z 0-9 - + . @ %]`, when creating a role any other characters must be percent encoded, see: [https://en.wikipedia.org/wiki/Percent-encoding](https://en.wikipedia.org/wiki/Percent-encoding).

      When passing a role name in a URL path it must be escaped again using percent encoding e.g. if a role is created with the name "0|59", the '|' character must first be percent-encoded resulting in "0%7C59". When using the same role name in a URL path it must be percent-encoded a second time resulting in "0%257C59"
    type: string
    required: true
  sessionid:
    name: sessionid
    in: path
    description: Session id
    type: string
    required: true
  name:
    in: path
    name: name
    description: |
      User's name, may contain contain any combination of the characters `[a-z A-Z 0-9 - + . @ %]`, when creating a user any other characters must be percent encoded, see: [https://en.wikipedia.org/wiki/Percent-encoding](https://en.wikipedia.org/wiki/Percent-encoding).

      When passing a user name in a URL path it must be escaped again using percent encoding e.g. if a user is created with the name "0|59", the '|' character must first be percent-encoded resulting in "0%7C59". When using the same user name in a URL path it must be percent-encoded a second time resulting in "0%257C59"
    type: string
    required: true
  user:
    in: body
    name: body
    description: Request body
    schema:
      type: object
      properties:
        name:
          type: string
          description: |
            Name of the user that will be created, may contain contain any combination of the characters `[a-z A-Z 0-9 - + . @ %]`, when creating a user any other characters must be percent encoded, see: [https://en.wikipedia.org/wiki/Percent-encoding](https://en.wikipedia.org/wiki/Percent-encoding).

            When passing a user name in a URL path it must be escaped again using percent encoding e.g. if a user is created with the name "0|59", the '|' character must first be percent-encoded resulting in "0%7C59". When using the same user name in a URL path it must be percent-encoded a second time resulting in "0%257C59"
        password:
          type: string
          description: Password of the user that will be created. Required, unless the `allow_empty_password` Sync Gateway per-database configuration value is set to true, in which case the password can be omitted. All active sessions for the user are invalidated when the password is changed.
        admin_channels:
          type: array
          description: Array of channel names to give the user access to
          items:
            type: string
            description: Channel name
        admin_roles:
          type: array
          description: Array of role names to assign to this user
          items:
            type: string
            description: Role name
        email:
          type: string
          description: Email of the user that will be created.
        disabled:
          type: boolean
          description: Boolean property to disable this user. The user will not be able to login if this property is set to true.
tags:
  # - name: auth
  #   description: Groups all endpoints for authentication activities
  - name: role
    description: Groups all endpoints for role-based activities
  # - name: session
  #   description: Groups all endpoints for session activities
  - name: user
    description: Groups all endpoints for user-based activities